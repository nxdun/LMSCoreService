# .github/workflows/docker-hub-deploy.yml
name: Deploy to Docker Hub and AWS

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    name: Build and Push to Docker Hub
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          'api-gateway', 
          'authentication-service', 
          'lecturer-service', 
          'payment-service',
          'coursemanagement-service', 
          'storage-service', 
          'notification-service', 
          'support-backend', 
          'email-service', 
          'certificate-service'
        ]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: udeesharukshan12
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      
      # Select the correct build context based on service
      - name: Set build context
        id: set-context
        run: |
          case ${{ matrix.service }} in
            api-gateway)
              echo "context=./backend/API-gateway" >> $GITHUB_OUTPUT
              echo "dockerfile=./backend/API-gateway/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            authentication-service)
              echo "context=./backend/authentication-service" >> $GITHUB_OUTPUT
              echo "dockerfile=./backend/authentication-service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            lecturer-service)
              echo "context=./backend/lecturer-service" >> $GITHUB_OUTPUT
              echo "dockerfile=./backend/lecturer-service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            payment-service)
              echo "context=./backend/payment-service-py" >> $GITHUB_OUTPUT
              echo "dockerfile=./backend/payment-service-py/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            coursemanagement-service)
              echo "context=./backend/coursemanagement-service" >> $GITHUB_OUTPUT
              echo "dockerfile=./backend/coursemanagement-service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            storage-service)
              echo "context=./backend/storage-service" >> $GITHUB_OUTPUT
              echo "dockerfile=./backend/storage-service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            notification-service)
              echo "context=./backend/notify-by-udeesha" >> $GITHUB_OUTPUT
              echo "dockerfile=./backend/notify-by-udeesha/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            support-backend)
              echo "context=./backend/supportbackend" >> $GITHUB_OUTPUT
              echo "dockerfile=./backend/supportbackend/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            email-service)
              echo "context=./backend/email-service" >> $GITHUB_OUTPUT
              echo "dockerfile=./backend/email-service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            certificate-service)
              echo "context=./backend/certificate-issue-service" >> $GITHUB_OUTPUT
              echo "dockerfile=./backend/certificate-issue-service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
          esac
      
      # Build and push Docker image to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ steps.set-context.outputs.context }}
          file: ${{ steps.set-context.outputs.dockerfile }}
          push: true
          platforms: linux/amd64
          tags: |
            udeesharukshan12/${{ matrix.service }}:latest
            udeesharukshan12/${{ matrix.service }}:${{ github.sha }}
      
      # Log build success
      - name: Log image build success
        run: |
          echo "✅ Successfully built and pushed image: udeesharukshan12/${{ matrix.service }}:latest"
          echo "✅ Also tagged as: udeesharukshan12/${{ matrix.service }}:${{ github.sha }}"
          
  # deploy-to-aws:
  #   name: Deploy to AWS with Terraform
  #   needs: build-and-push
  #   if: github.ref == 'refs/heads/main' # Only deploy on main branch
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
      
  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.5.0
      
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
      
  #     - name: Terraform Init
  #       working-directory: ./aws-terraform
  #       run: terraform init
      
  #     - name: Terraform Format
  #       working-directory: ./aws-terraform
  #       run: terraform fmt -check
      
  #     - name: Terraform Validate
  #       working-directory: ./aws-terraform
  #       run: terraform validate
      
  #     - name: Terraform Plan
  #       working-directory: ./aws-terraform
  #       run: terraform plan -out=tfplan
        
  #     - name: Terraform Apply
  #       working-directory: ./aws-terraform
  #       run: terraform apply -auto-approve tfplan
        
  #     - name: Extract Terraform Outputs
  #       id: terraform-outputs
  #       working-directory: ./aws-terraform
  #       run: |
  #         echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
  #         echo "application_url=$(terraform output -raw application_url)" >> $GITHUB_OUTPUT
  #         echo "prometheus_url=$(terraform output -raw prometheus_url)" >> $GITHUB_OUTPUT
  #         echo "grafana_url=$(terraform output -raw grafana_url)" >> $GITHUB_OUTPUT
          
  # notify-success:
  #   name: Notify Deployment Success
  #   needs: [build-and-push, deploy-to-aws]
  #   if: always() && (needs.build-and-push.result == 'success')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deployment Summary
  #       env:
  #         TERRAFORM_SUCCESS: ${{ needs.deploy-to-aws.result == 'success' }}
  #         INSTANCE_IP: ${{ needs.deploy-to-aws.outputs.instance_ip || 'Not deployed' }}
  #         APP_URL: ${{ needs.deploy-to-aws.outputs.application_url || 'Not deployed' }}
  #       run: |
  #         echo "✅ All Docker images successfully pushed to Docker Hub"
  #         echo "🔄 Images are now available at: docker.io/udeesharukshan12/<service-name>"
  #         echo "🏷️ Tags: latest, ${{ github.sha }}"
          
  #         if [[ "$TERRAFORM_SUCCESS" == "true" ]]; then
  #           echo "✅ AWS infrastructure deployed successfully"
  #           echo "🌐 Application URL: $APP_URL"
  #           echo "🖥️ EC2 Instance IP: $INSTANCE_IP"
  #           echo "📊 Prometheus: ${{ needs.deploy-to-aws.outputs.prometheus_url }}"
  #           echo "📈 Grafana: ${{ needs.deploy-to-aws.outputs.grafana_url }}"
  #         else
  #           echo "⚠️ AWS deployment was skipped or failed"
  #         fi
          
  #         echo "📅 Deployment time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"